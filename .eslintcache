[{"C:\\Projects\\Web\\weatherman\\src\\serviceWorker.js":"1","C:\\Projects\\Web\\weatherman\\src\\index.js":"2","C:\\Projects\\Web\\weatherman\\src\\App.js":"3","C:\\Projects\\Web\\weatherman\\src\\app\\store.js":"4","C:\\Projects\\Web\\weatherman\\src\\features\\header\\Header.tsx":"5","C:\\Projects\\Web\\weatherman\\src\\features\\main\\Body.tsx":"6","C:\\Projects\\Web\\weatherman\\src\\features\\header\\unitSlice.js":"7","C:\\Projects\\Web\\weatherman\\src\\features\\leafletmap\\LeafletMap.tsx":"8","C:\\Projects\\Web\\weatherman\\src\\features\\main\\citySlice.js":"9","C:\\Projects\\Web\\weatherman\\src\\api\\weatherApi.js":"10","C:\\Projects\\Web\\weatherman\\src\\helpers\\utils.js":"11","C:\\Projects\\Web\\weatherman\\src\\features\\textSearch\\TextSearch.tsx":"12","C:\\Projects\\Web\\weatherman\\src\\weatherInfo\\WeatherInfo.tsx":"13","C:\\Projects\\Web\\weatherman\\src\\helpers\\hooks.js":"14"},{"size":5141,"mtime":1610039505096,"results":"15","hashOfConfig":"16"},{"size":985,"mtime":1610055027783,"results":"17","hashOfConfig":"16"},{"size":316,"mtime":1610052194067,"results":"18","hashOfConfig":"16"},{"size":336,"mtime":1610182497550,"results":"19","hashOfConfig":"16"},{"size":6874,"mtime":1610288365408,"results":"20","hashOfConfig":"16"},{"size":4453,"mtime":1610289544495,"results":"21","hashOfConfig":"16"},{"size":769,"mtime":1610122246661,"results":"22","hashOfConfig":"16"},{"size":9805,"mtime":1610289884768,"results":"23","hashOfConfig":"16"},{"size":2844,"mtime":1610285414834,"results":"24","hashOfConfig":"16"},{"size":1104,"mtime":1610226399282,"results":"25","hashOfConfig":"16"},{"size":646,"mtime":1610229167031,"results":"26","hashOfConfig":"16"},{"size":3042,"mtime":1610288663609,"results":"27","hashOfConfig":"16"},{"size":5515,"mtime":1610289963428,"results":"28","hashOfConfig":"16"},{"size":617,"mtime":1610288931767,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1338vqq",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Projects\\Web\\weatherman\\src\\serviceWorker.js",[],["63","64"],"C:\\Projects\\Web\\weatherman\\src\\index.js",[],"C:\\Projects\\Web\\weatherman\\src\\App.js",[],"C:\\Projects\\Web\\weatherman\\src\\app\\store.js",[],"C:\\Projects\\Web\\weatherman\\src\\features\\header\\Header.tsx",[],["65","66"],"C:\\Projects\\Web\\weatherman\\src\\features\\main\\Body.tsx",[],"C:\\Projects\\Web\\weatherman\\src\\features\\header\\unitSlice.js",[],"C:\\Projects\\Web\\weatherman\\src\\features\\leafletmap\\LeafletMap.tsx",["67","68"],"import React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  Backdrop,\r\n  Box,\r\n  CircularProgress,\r\n  makeStyles,\r\n  Theme,\r\n} from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  useMap,\r\n  useMapEvents,\r\n  Popup,\r\n} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport * as Nominatim from \"nominatim-browser\";\r\nimport { BaseCSSProperties } from \"@material-ui/core/styles/withStyles\";\r\n\r\nimport L, { divIcon } from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport {\r\n  setCity,\r\n  selectLoading,\r\n  selectError,\r\n  selectWeather,\r\n  getWeatherForCity,\r\n  selectCity,\r\n} from \"../main/citySlice\";\r\nimport { selectUnit } from \"../header/unitSlice\";\r\n// import Popup from \"react-leaflet-editable-popup\";\r\nimport { tempToCelsius, windToMetric } from \"../../helpers/utils\";\r\n\r\nimport cloud0 from \"../../images/cloud0.png\";\r\nimport cloud1 from \"../../images/cloud1.png\";\r\nimport cloud2 from \"../../images/cloud2.png\";\r\nimport cloud3 from \"../../images/cloud3.png\";\r\nimport cloud4 from \"../../images/cloud4.png\";\r\nimport temp0 from \"../../images/temp0.png\";\r\nimport temp1 from \"../../images/temp1.png\";\r\nimport temp2 from \"../../images/temp2.png\";\r\nimport temp3 from \"../../images/temp3.png\";\r\nimport temp4 from \"../../images/temp4.png\";\r\nimport temp5 from \"../../images/temp5.png\";\r\nimport wind0 from \"../../images/wind0.png\";\r\nimport wind1 from \"../../images/wind1.png\";\r\nimport wind2 from \"../../images/wind2.png\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faQuestion } from \"@fortawesome/free-solid-svg-icons\";\r\nimport WeatherInfo from \"../../weatherInfo/WeatherInfo\";\r\n\r\nlet DefaultIcon = L.icon({\r\n  iconUrl: icon,\r\n  shadowUrl: iconShadow,\r\n});\r\n\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\n\r\nconst LeafletMap = () => {\r\n  const selectedUnit = useSelector(selectUnit);\r\n  const selectedCity = useSelector(selectCity);\r\n\r\n  const weatherInfo = useSelector(selectWeather);\r\n\r\n  const [selectedPositionWithZoom, setSelectedPositionWithZoom] = useState<\r\n    [number, number, number, string]\r\n  >([\r\n    weatherInfo ? weatherInfo.coord.lat : null,\r\n    weatherInfo ? weatherInfo.coord.lon : null,\r\n    null,\r\n    null,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selectedPositionWithZoom &&\r\n      selectedPositionWithZoom[0] &&\r\n      selectedPositionWithZoom[3] &&\r\n      selectedCity.toLowerCase() !== selectedPositionWithZoom[3].toLowerCase()\r\n    ) {\r\n      dispatch(setCity(selectedPositionWithZoom[3].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")));\r\n      doFetchWeatherInfo(selectedPositionWithZoom[3].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"), selectedUnit);\r\n    }\r\n  }, [selectedPositionWithZoom, selectedUnit]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selectedPositionWithZoom &&\r\n      selectedPositionWithZoom[0] &&\r\n      selectedPositionWithZoom[3]\r\n    ) {\r\n      doFetchWeatherInfo(selectedPositionWithZoom[3].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"), selectedUnit);\r\n    }\r\n  }, [selectedUnit]);\r\n\r\n  useEffect(() => {\r\n    if (weatherInfo) {\r\n      setSelectedPositionWithZoom([\r\n        weatherInfo.coord.lat,\r\n        weatherInfo.coord.lon,\r\n        10,\r\n        weatherInfo.name.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"),\r\n      ]);\r\n    }\r\n  }, [weatherInfo]);\r\n\r\n  const styles = useStyles({} as StyleProps);\r\n  const dispatch = useDispatch();\r\n\r\n  const loading = useSelector(selectLoading);\r\n  const errors = useSelector(selectError);\r\n\r\n  if (errors) {\r\n    alert(errors);\r\n  }\r\n\r\n  const doFetchWeatherInfo = async (city, unit) => {\r\n    try {\r\n      // @ts-ignore\r\n      dispatch(getWeatherForCity({ city, unit }));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const Markers = (props: any) => {\r\n    const map = useMapEvents({\r\n      click(e) {\r\n        Nominatim.reverseGeocode({\r\n          lat: e.latlng.lat.toString(),\r\n          lon: e.latlng.lng.toString(),\r\n        }).then((resp: any) => {\r\n          if (\r\n            resp &&\r\n            resp.address &&\r\n            (resp.address.city || resp.address.town || resp.address.village)\r\n          ) {\r\n            const theCity = resp.address.city\r\n              ? resp.address.city\r\n              : resp.address.town\r\n              ? resp.address.town\r\n              : resp.address.village;\r\n            props.setSelectedPositionWithZoom([\r\n              e.latlng.lat,\r\n              e.latlng.lng,\r\n              map.getZoom(),\r\n              theCity,\r\n            ]);\r\n          }\r\n        });\r\n      },\r\n    });\r\n\r\n    const cloudsPerc = weatherInfo ? weatherInfo.weather.clouds.all : null;\r\n    const cloudImg =\r\n      cloudsPerc !== null\r\n        ? cloudsPerc === 0\r\n          ? cloud0\r\n          : cloudsPerc > 0 && cloudsPerc <= 25\r\n          ? cloud1\r\n          : cloudsPerc > 25 && cloudsPerc <= 50\r\n          ? cloud2\r\n          : cloudsPerc > 50 && cloudsPerc <= 75\r\n          ? cloud3\r\n          : cloud4\r\n        : null;\r\n\r\n    const temp = weatherInfo\r\n      ? tempToCelsius(weatherInfo.weather.temperature.actual, selectedUnit)\r\n      : null;\r\n    const tempImg = temp !== null\r\n      ? temp < -20\r\n        ? temp0\r\n        : temp >= -20 && temp < 0\r\n        ? temp1\r\n        : temp >= 0 && temp < 10\r\n        ? temp2\r\n        : temp >= 10 && temp < 20\r\n        ? temp3\r\n        : temp >= 20 && temp < 30\r\n        ? temp4\r\n        : temp5\r\n      : null;\r\n\r\n    const windSp = weatherInfo\r\n      ? windToMetric(weatherInfo.weather.wind.speed, selectedUnit)\r\n      : null;\r\n    const windImg = windSp !== null\r\n      ? windSp < 10\r\n        ? wind0\r\n        : windSp >= 10 && windSp < 25\r\n        ? wind1\r\n        : wind2\r\n      : null;\r\n\r\n    const icon = divIcon({\r\n      className: \"custom-icon\",\r\n      html: ReactDOMServer.renderToString(\r\n        cloudImg || windImg || tempImg ? (\r\n          <Box className={styles.customMarkerBoxImgContainer}>\r\n            {cloudImg && (\r\n              <Box\r\n                className={styles.customMarkerBoxImg}\r\n                style={{ backgroundImage: `url(${cloudImg})` }}\r\n              />\r\n            )}\r\n            {tempImg && (\r\n              <Box\r\n                className={styles.customMarkerBoxImg}\r\n                style={{ backgroundImage: `url(${tempImg})` }}\r\n              />\r\n            )}\r\n            {windImg && (\r\n              <Box\r\n                className={styles.customMarkerBoxImg}\r\n                style={{ backgroundImage: `url(${windImg})` }}\r\n              />\r\n            )}\r\n          </Box>\r\n        ) : (\r\n          <Box className={styles.customMarkerBox}>\r\n            <FontAwesomeIcon icon={faQuestion} />\r\n          </Box>\r\n        )\r\n      ),\r\n    });\r\n\r\n    return selectedPositionWithZoom && selectedPositionWithZoom[0] !== null ? (\r\n      <Marker\r\n        key={selectedPositionWithZoom[0]}\r\n        position={[selectedPositionWithZoom[0], selectedPositionWithZoom[1]]}\r\n        icon={icon}\r\n      >\r\n        {weatherInfo && (\r\n          <Popup>\r\n            <WeatherInfo />\r\n          </Popup>\r\n        )}\r\n      </Marker>\r\n    ) : null;\r\n  };\r\n\r\n  const ChangeMap = (props: any) => {\r\n    const map = useMap();\r\n    if (selectedPositionWithZoom[0] !== null) {\r\n      map.setView(\r\n        [selectedPositionWithZoom[0], selectedPositionWithZoom[1]],\r\n        selectedPositionWithZoom[2]\r\n      );\r\n    } else {\r\n      map.setView(props.center, props.zoom);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (loading === \"pending\") {\r\n    return (\r\n      <Backdrop className={styles.backdrop} open={loading === \"pending\"}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box className={styles.fullHeight}>\r\n      <MapContainer className={styles.map}>\r\n        <ChangeMap center={[47.06667, 21.93333]} zoom={10} />\r\n        <Markers setSelectedPositionWithZoom={setSelectedPositionWithZoom} />\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        ></TileLayer>\r\n      </MapContainer>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default withRouter(LeafletMap);\r\n\r\ninterface StyleProps {\r\n  customMarkerBox: BaseCSSProperties;\r\n  customMarkerBoxImg: BaseCSSProperties;\r\n  map: BaseCSSProperties | any;\r\n  fullHeight: BaseCSSProperties;\r\n  backdrop: BaseCSSProperties | any;\r\n  img: BaseCSSProperties;\r\n  customMarkerBoxImgContainer: BaseCSSProperties;\r\n}\r\n\r\nlet baseStyle: StyleProps = {\r\n  img: {\r\n    backgroundRepeat: \"no-repeat\",\r\n    height: 40,\r\n    margin: \"4px 0\",\r\n    backgroundPosition: \"center\",\r\n    backgroundSize: \"contain\",\r\n    borderRadius: 2,\r\n  },\r\n  customMarkerBox: {\r\n    fontSize: \"large\",\r\n    backgroundColor: \"white\",\r\n    padding: 12,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    borderRadius: \"50%\",\r\n    border: \"solid 2px darkred\",\r\n  },\r\n  customMarkerBoxImgContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    width: 120,\r\n    backgroundColor: \"grey\",\r\n    padding: 2,\r\n  },\r\n  customMarkerBoxImg: {\r\n    backgroundRepeat: \"no-repeat\",\r\n    height: 40,\r\n    width: 40,\r\n    margin: \"0 2px\",\r\n    backgroundColor: \"white\",\r\n    backgroundPosition: \"center\",\r\n    backgroundSize: \"contain\",\r\n    borderRadius: 2,\r\n    border: \"solid 1px\",\r\n  },\r\n  map: {\r\n    height: \"100%\",\r\n  },\r\n  fullHeight: {\r\n    height: \"100%\",\r\n  },\r\n  backdrop: {\r\n    position: \"initial\",\r\n    height: \"100%\",\r\n  },\r\n};\r\n\r\nconst useStyles = makeStyles<Theme, StyleProps>(() => baseStyle as any);\r\n","C:\\Projects\\Web\\weatherman\\src\\features\\main\\citySlice.js",[],"C:\\Projects\\Web\\weatherman\\src\\api\\weatherApi.js",[],"C:\\Projects\\Web\\weatherman\\src\\helpers\\utils.js",[],["69","70"],"C:\\Projects\\Web\\weatherman\\src\\features\\textSearch\\TextSearch.tsx",["71"],"import React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  makeStyles,\r\n  Box,\r\n  Theme,\r\n  Button,\r\n  TextField,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { BaseCSSProperties } from \"@material-ui/core/styles/withStyles\";\r\nimport WeatherInfo from \"../../weatherInfo/WeatherInfo\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getWeatherForCity,\r\n  selectCity,\r\n  selectLoading,\r\n  setCity,\r\n} from \"../main/citySlice\";\r\nimport { selectUnit } from \"../header/unitSlice\";\r\n\r\nconst TextSearch = () => {\r\n  const styles = useStyles({} as StyleProps);\r\n\r\n  const selectedCity = useSelector(selectCity);\r\n  const selectedUnit = useSelector(selectUnit);\r\n  const [cityTxt, setCityTxt] = useState(selectedCity || \"\");\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectLoading);\r\n\r\n  useEffect(() => {\r\n    setCityTxt(selectedCity || \"\");\r\n  }, [selectedCity]);\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    dispatch(getWeatherForCity({ city: cityTxt.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"), unit: selectedUnit }));\r\n  }, [selectedUnit]);\r\n\r\n  const getWeatherInfo = () => {\r\n    try {\r\n      if (cityTxt !== selectedCity) dispatch(setCity(cityTxt.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")));\r\n      // @ts-ignore\r\n      dispatch(getWeatherForCity({ city: cityTxt.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"), unit: selectedUnit }));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box className={styles.boxContainer}>\r\n        <TextField\r\n          autoFocus\r\n          margin=\"dense\"\r\n          id=\"id\"\r\n          label=\"City\"\r\n          fullWidth\r\n          value={cityTxt}\r\n          onChange={(e) => setCityTxt(e.target.value)}\r\n          className={styles.input}\r\n        />\r\n\r\n        <Button\r\n          disabled={cityTxt === \"\"}\r\n          onClick={() => getWeatherInfo()}\r\n          color=\"primary\"\r\n          autoFocus\r\n          className={styles.actionButton}\r\n        >\r\n          Get Weather Info\r\n        </Button>\r\n      </Box>\r\n\r\n      <Box>\r\n        {loading === \"pending\" && (\r\n          <Backdrop className={styles.backdrop} open={loading === \"pending\"}>\r\n            <CircularProgress color=\"inherit\" />\r\n          </Backdrop>\r\n        )}\r\n        {loading === \"idle\" && <WeatherInfo />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default withRouter(TextSearch);\r\n\r\ninterface StyleProps {\r\n  boxContainer: BaseCSSProperties;\r\n  input: BaseCSSProperties | any;\r\n  actionButton: BaseCSSProperties;\r\n  backdrop: BaseCSSProperties;\r\n}\r\n\r\nlet baseStyle: StyleProps = {\r\n  actionButton: {\r\n    fontWeight: 700,\r\n    border: \"solid 1px\",\r\n    marginTop: 12,\r\n  },\r\n  input: {},\r\n  boxContainer: {\r\n    margin: 20,\r\n    border: \"solid 1px lightgrey\",\r\n    padding: 16,\r\n    borderRadius: 2,\r\n  },\r\n  backdrop: {\r\n    position: \"initial\",\r\n    height: 280,\r\n  },\r\n};\r\nconst useStyles = makeStyles<Theme, StyleProps>(() => baseStyle as any);\r\n","C:\\Projects\\Web\\weatherman\\src\\weatherInfo\\WeatherInfo.tsx",[],"C:\\Projects\\Web\\weatherman\\src\\helpers\\hooks.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":90,"column":6,"nodeType":"78","endLine":90,"endColumn":46,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":100,"column":6,"nodeType":"78","endLine":100,"endColumn":20,"suggestions":"81"},{"ruleId":"72","replacedBy":"82"},{"ruleId":"74","replacedBy":"83"},{"ruleId":"76","severity":1,"message":"84","line":39,"column":6,"nodeType":"78","endLine":39,"endColumn":20,"suggestions":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'doFetchWeatherInfo', and 'selectedCity'. Either include them or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has missing dependencies: 'doFetchWeatherInfo' and 'selectedPositionWithZoom'. Either include them or remove the dependency array.",["89"],["86"],["87"],"React Hook useEffect has missing dependencies: 'cityTxt' and 'dispatch'. Either include them or remove the dependency array.",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [dispatch, doFetchWeatherInfo, selectedCity, selectedPositionWithZoom, selectedUnit]",{"range":"97","text":"98"},"Update the dependencies array to be: [doFetchWeatherInfo, selectedPositionWithZoom, selectedUnit]",{"range":"99","text":"100"},"Update the dependencies array to be: [cityTxt, dispatch, selectedUnit]",{"range":"101","text":"102"},[2959,2999],"[dispatch, doFetchWeatherInfo, selectedCity, selectedPositionWithZoom, selectedUnit]",[3284,3298],"[doFetchWeatherInfo, selectedPositionWithZoom, selectedUnit]",[1152,1166],"[cityTxt, dispatch, selectedUnit]"]